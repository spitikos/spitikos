name: Release

on:
  workflow_call:
    inputs:
      chart_path:
        required: true
        type: string
      image_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string

jobs:
  docker-publish:
    name: Build and Push Docker Image
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm64
          tags: ghcr.io/spitikos/${{ inputs.image_name }}:${{ inputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-and-commit-charts:
    name: Update and Commit Charts
    runs-on: ubuntu-latest
    needs: docker-publish
    permissions:
      contents: write

    steps:
      - name: Checkout Charts Repository
        uses: actions/checkout@v4
        with:
          repository: spitikos/charts
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup yq and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq jq

      - name: Update image tag in all charts
        run: |
          chart_paths=$(echo '${{ inputs.chart_path }}' | jq -r '.[]')
          for path in $chart_paths; do
            echo "Updating image tag in $path/values.yaml"
            yq -i -y '.image.tag = "${{ inputs.image_tag }}"' "$path/values.yaml"
          done

      - name: Commit Changes
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          # Stage all changes from the loop
          git add .
          # Check if there are any staged changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Update ${{ inputs.image_name }} image to tag ${{ inputs.image_tag }}"
            git push origin main
          else
            echo "No changes to commit."
          fi
